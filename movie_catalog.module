<?php

/**
 * Implements hook_cron_queue_info().
 */
function movie_catalog_cron_queue_info() {
  $queues['movie_catalog'] = array(
    'worker callback' => 'movie_catalog_process_queue_item',
    'time' => (int) variable_get('movie_catalog_process_time', 60),
  );

  return $queues;
}

/**
 * Perform action on each queue item.
 *
 * @param array $data
 *   An array containing source and target taxonomy term data
 *
 */
function movie_catalog_process_queue_item($data) {
  switch (strtolower($data['op'])) {
    case 'add':
        if ($node = node_load($data['movie']->entity_id)) {
          // Prevent processing an item that was added twice to the queue.
          return;
        }
        // Create new node.
        $node = new stdClass();
        $node->type = $data['type'];
        $node->language = LANGUAGE_NONE;
        $node->status = 1;
        $node->promote = 0;
        $node->comment = 0;

        node_object_prepare($node);
        populate_node_data($node, $data['movie']);
        node_submit($node);
        node_save($node);
      break;

    case 'update':
        // Update existing node.
        if (!$node = node_load($data['movie']->entity_id)) {
          // If for some reason the node is no longer available, re-insert it.
          $data['op'] = 'add';
          movie_catalog_process_queue_item($data);
          return;
        }
        populate_node_data($node, $data['movie']);
        node_submit($node);
        node_save($node);
      break;

    default:
      // Invalid Action.
      drupal_set_message(t("Invalid operation: @op", array(
        '@op' => $data['op'],
      )));
      break;
  }
}

/**
 * Populate node values.
 * 
 * @param $node object
 * @param $data object 
 */
function populate_node_data(&$node, $data) {

  if (isset($data->imdb_id)) {
    $node->field_imdb_id[$node->language][0]['value'] = check_plain($data->imdb_id);
  }

  if (isset($data->title)) {
    $node->title = check_plain($data->title);
  }

  if (isset($data->plot)) {
    $node->body[$node->language][0] = movie_catalog_prepare_field_body($data->plot, 'filtered_html');
  }
  
  if (isset($data->rating)) {
    $node->field_rating[$node->language][0]['value'] = check_plain($data->rating);
  }

  // Genres (Autocomplete field).
  if (isset($data->genres)) {
    $node->field_genres[$node->language] = movie_catalog_prepare_term_autocomplete('genres', $data->genres);
  }

  if (isset($data->cover)) {
    $node->field_cover[$node->language][0] = movie_catalog_prepare_remote_image($data->cover, $data->title);
  }

  // Term reference (taxonomy) field
  //$node->field_genres[$node->language][]['tid'] = $form_state['values']['a taxonomy term id'];

  // Entity reference field
  /*
  $node->field_customer_nid[$node->language][] = array(
    'target_id' => $form_state['values']['entity id'],
    'target_type' => 'node',
  );
  */
  // 'node' is default,


}

/**
 * Helper to prepare value for body.
 *
 * @param $value
 * @param $format_id
 * @return array
 */
function movie_catalog_prepare_field_body($value, $format_id) {
  // Clean array.
  if (is_array($value)) {
    foreach ($value as $key => $item) {
      $value[$key] = '<p>' . check_markup($item, $format_id) . '</p>';
    }
    $value = implode("\n", $value);
  } else {
    $value = check_markup($value, $format_id);
  }

  return array(
    'value' => $value,
    'summary' => text_summary($value),
    'format' => $format_id,
  );
}

/**
 * Helper to populate Tids for multiple values autocomplete term reference field.
 *
 * @param $field_name
 * @param $vocab_name
 * @param $value
 */
function movie_catalog_prepare_term_autocomplete($vocab_name, $value) {
  $value = is_array($value)
    ? implode(',', $value)
    : $value;
  $value = check_plain($value);

  $vocabulary = taxonomy_vocabulary_machine_name_load($vocab_name);

  $values = array();
  foreach (drupal_explode_tags($value) as $term_entry) {
    // See if the term exists in the chosen vocabulary and return the tid;
    // otherwise, create a new 'autocreate' term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($term_entry), 'vid' => $vocabulary->vid))) {
      $term = array_pop($possibilities);
    }
    else {
      $term = array(
        'tid' => 'autocreate',
        'vid' => $vocabulary->vid,
        'name' => $term_entry,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
    }
    $values[] = (array)$term;
  }

  return $values;
}

/**
 * Helper to save remote images as local files.
 *
 * @param $remote_url
 * @param $local_filename
 */
function movie_catalog_prepare_remote_image($remote_url, $local_filename) {
  $local = array();
  module_load_include('inc', 'pathauto');

  // Open remote url.
  $source_info = new SplFileInfo($remote_url);
  $local_filename = pathauto_cleanstring($local_filename) . '.' . $source_info->getExtension();

  $result = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('filename', $local_filename)
    ->execute();

  if (!$fid = $result->fetchCol()) {
    // Load remote file.
    $file_contents = file_get_contents($remote_url);

    // Save file.
    $picture_directory = variable_get('file_default_scheme', 'public') . '://' . 'images';
    file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY);
    $destination = file_stream_wrapper_uri_normalize($picture_directory . '/' . $local_filename);
    $file = file_save_data($file_contents, $destination, FILE_EXISTS_RENAME);
  }
  else {
    if (is_array($fid)) {
      $file = file_load(current($fid));
    }
  }
  if (is_object($file)) {
    return get_object_vars($file);
  }
}
