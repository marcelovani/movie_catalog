<?php

/**
 * Implements hook_cron_queue_info().
 */
function movie_catalog_cron_queue_info() {
  $queues['movie_catalog'] = array(
    'worker callback' => 'movie_catalog_process_queue_item',
    'time' => (int) variable_get('movie_catalog_process_time', 60),
  );

  return $queues;
}

/**
 * Perform action on each queue item.
 *
 * @param array $data
 *   An array containing source and target taxonomy term data
 *
 */
function movie_catalog_process_queue_item($data) {
  switch (strtolower($data['op'])) {
    case 'add':
      if (!$movie = movie_catalog_movie_exists($data['movie']->imdb_id)) {
        // Create new node.
        $node = new stdClass();
        $node->type = $data['type'];
        $node->language = LANGUAGE_NONE;
        $node->status = 1;
        $node->promote = 0;
        $node->comment = 0;

        node_object_prepare($node);
      }
      else {
        // Update node.
        $node = node_load($movie->entity_id);
      }

      // Populate movie data.
      populate_node_data($node, $data['movie']);

      node_submit($node);
      node_save($node);
      break;

    default:
      // Invalid Action.
      drupal_set_message(t("Invalid operation: @op", array(
        '@op' => $data['op'],
      )));
      break;
  }
}

/**
 * Populate node values.
 *
 * @param $node object
 * @param $data object
 */
function populate_node_data(&$node, $data) {
  if (isset($data->imdb_id)) {
    $node->field_imdb_id[$node->language][0]['value'] = check_plain($data->imdb_id);
  }

  if (isset($data->title)) {
    $node->title = htmlspecialchars_decode(check_plain($data->title));
  }

  if (isset($data->plot)) {
    $node->body[$node->language][0] = movie_catalog_prepare_field_body($data->plot, 'filtered_html');
  }

  if (isset($data->rating)) {
    $node->field_rating[$node->language][0]['value'] = check_plain($data->rating);
  }

  // Genres (Autocomplete field).
  if (isset($data->genres)) {
    $node->field_genres[$node->language] = movie_catalog_prepare_term_autocomplete('genres', $data->genres);
  }

  // Countries (Autocomplete field).
  if (isset($data->countries)) {
    $node->field_countries[$node->language] = movie_catalog_prepare_term_autocomplete('countries', $data->countries);
  }

  if (isset($data->directors)) {
    $node->field_directors[$node->language] = movie_catalog_prepare_person('director', $data->directors, $node->language);
  }

  if (isset($data->cast)) {
    $node->field_cast[$node->language] = movie_catalog_prepare_person('cast', $data->cast, $node->language);
  }

  if (isset($data->writer)) {
    $node->field_writer[$node->language] = movie_catalog_prepare_person('writer', $data->writer, $node->language);
  }

  if (isset($data->cover)) {
    $node->field_cover[$node->language][0] = movie_catalog_prepare_remote_image($data->cover, $data->title);
  }

  //debug($node);
  // Term reference (taxonomy) field
  //$node->field_genres[$node->language][]['tid'] = $form_state['values']['a taxonomy term id'];

  // Entity reference field
  /*
  $node->field_customer_nid[$node->language][] = array(
    'target_id' => $form_state['values']['entity id'],
    'target_type' => 'node',
  );
  */
  // 'node' is default,

}

/**
 * Helper to prepare value for body.
 *
 * @param $value
 * @param $format_id
 * @return array
 */
function movie_catalog_prepare_field_body($value, $format_id) {
  // Clean array.
  if (is_array($value)) {
    foreach ($value as $key => $item) {
      $value[$key] = '<p>' . check_markup($item, $format_id) . '</p>';
    }
    $value = implode("\n", $value);
  }
  else {
    $value = check_markup($value, $format_id);
  }

  return array(
    'value' => $value,
    'summary' => text_summary($value),
    'format' => $format_id,
  );
}

/**
 * Helper to populate Tids for multiple values autocomplete term reference field.
 *
 * @param $field_name
 * @param $vocab_name
 * @param $value
 */
function movie_catalog_prepare_term_autocomplete($vocab_name, $value) {
  $value = is_array($value)
    ? implode(',', $value)
    : $value;
  $value = check_plain($value);

  $vocabulary = taxonomy_vocabulary_machine_name_load($vocab_name);

  $values = array();
  foreach (drupal_explode_tags($value) as $term_entry) {
    // See if the term exists in the chosen vocabulary and return the tid;
    // otherwise, create a new 'autocreate' term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array(
      'name' => trim($term_entry),
      'vid' => $vocabulary->vid
    ))
    ) {
      $term = array_pop($possibilities);
    }
    else {
      $term = array(
        'tid' => 'autocreate',
        'vid' => $vocabulary->vid,
        'name' => $term_entry,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
    }
    $values[] = (array) $term;
  }

  return $values;
}

/**
 * Helper to save remote images as local files.
 *
 * @param $remote_url
 * @param $local_filename
 */
function movie_catalog_prepare_remote_image($remote_url, $local_filename) {
  module_load_include('inc', 'pathauto');

  // Open remote url.
  $source_info = new SplFileInfo($remote_url);
  $local_filename = pathauto_cleanstring($local_filename) . '.' . $source_info->getExtension();

  $result = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('filename', $local_filename)
    ->execute();

  if (!$fid = $result->fetchCol()) {
    // Load remote file.
    $file_contents = file_get_contents($remote_url);

    // Save file.
    $picture_directory = variable_get('file_default_scheme', 'public') . '://' . 'images';
    file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY);
    $destination = file_stream_wrapper_uri_normalize($picture_directory . '/' . $local_filename);
    $file = file_save_data($file_contents, $destination, FILE_EXISTS_RENAME);
  }
  else {
    if (is_array($fid)) {
      $file = file_load(current($fid));
    }
  }
  if (is_object($file)) {
    return get_object_vars($file);
  }
}

/**
 * Helper to check if the IMDB id already exists.
 *
 * @param $imdb_id
 * @return mixed
 */
function movie_catalog_movie_exists($imdb_id) {
  $result = db_select('field_data_field_imdb_id', 'i')
    ->fields('i', array('entity_id'))
    ->condition('field_imdb_id_value', $imdb_id, '=')
    ->condition('language', LANGUAGE_NONE, '=')
    ->execute()
    ->fetchObject();

  return $result;
}

/**
 * Helper to check if the Person IMDB id already exists.
 *
 * @param $imdb_id
 * @return mixed
 */
function movie_catalog_person_exists($imdb_id) {
  $result = db_select('field_data_field_person_imdb_id', 'i')
    ->fields('i', array('entity_id'))
    ->condition('field_person_imdb_id_value', $imdb_id, '=')
    ->condition('language', LANGUAGE_NONE, '=')
    ->execute()
    ->fetchObject();

  return $result;
}

/**
 * Helper to prepare person.
 *
 * @param $role
 * @param $data_directors
 * @param $language
 * @return array
 */
function movie_catalog_prepare_person($role, $data_directors, $language) {
  $directors = array_combine($data_directors->ids, $data_directors->names);
  $field_value = array();
  foreach ($directors as $imdb_id => $name) {
    if ($person = movie_catalog_person_exists($imdb_id)) {
      $field_value[]['tid'] = $person->entity_id;
      $term = taxonomy_term_load($person->entity_id);
      // Check it role is already a director for this person.
      if (!_movie_catalog_array_search($role, $term->field_person_roles[$language])) {
        // Update term and add director.
        $term->field_person_roles[$language][]['value'] = $role;
        taxonomy_term_save($term);
      }
    }
    else {
      // Create new term.
      $vocabulary = taxonomy_vocabulary_machine_name_load('people');
      $term = new stdClass();
      $term->name = $name;
      $term->vid = $vocabulary->vid;
      $term->field_person_imdb_id[$language][]['value'] = $imdb_id;
      $term->field_person_roles[$language][]['value'] = $role;
      taxonomy_term_save($term);
      // Assign to the node.
      $field_value[]['tid'] = $term->tid;
    }
  }

  return $field_value;
}

/**
 * Helper to search on multi-value term.
 *
 * @param $search
 * @param $array
 * @return bool
 */
function _movie_catalog_array_search($search, $array) {
  foreach ($array as $key => $item) {
    if ($item['value'] == $search) {
      return TRUE;
    }
  }
  return FALSE;
}